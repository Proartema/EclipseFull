package iesjandula.projectunit5.excepciones.biblioteca.modelo;

import java.util.Arrays;
import java.util.Comparator;
/**
 * {@summary Biblioteca stores a group of books, offering some management at the same time.}
 * 
 * 
 * Biblioteca is composed of Libro {see Libro}
 * 
 * 
 * @author Alejandro
 * @version 1.0
 * @since 1.0
 * 
 */
public class Biblioteca {
/**
 * This parameter creates a "NullByDefault" book to use it lately, as a base to
 * fill our arrays, avoiding the exceptions generated by a null object.
 * 	
 * @see Libro
 */
	private static final Libro libroNulo= new LibroFiccion("LibroNulo",new Autor("ZZZZZ","ZZZZZZ","ZZZZZ"),0,"LibroNulo","ZZZZZZZZZZZZZZZZZZZZZZZZZZZ", EnumLibro.CUENTOS);
/**
 * This parameter stores the name of the library.
 * 
 */
	private String nombre;
/**
 * This Array stores the "book" objects inside the library.
 * 
 * @see Libro
 */
	private Libro[] libros;
/**
 * This constant parameter declares the maximum amount of books allowed inside the library.
 * It's used as the array's range.
 * 
 */
	
	private final int MAX_LIBROS=200;
/**
 * This parameters stores the amount of books currently in the library.
 * 
 * 
 */
	private int contLibros=0;
	
	
	// Quiero que lo hagais igual que La tienda y el clienta
	// con el objeto LibroNulo
	
	// ademas de los metodos del ejercicio añadir los mismos métodos que en tienda
/**
 * This constructor creates a library with a name, setting the array to its max capacity while filling it
 * with the null object created before.
 * 
 * 
 * @param nombre it's the name of the library
 * 
 * @see nombre
 * @see libros
 * @see libroNulo
 * @see MAX_LIBROS
 */
	public Biblioteca(String nombre) {
		this.nombre= nombre;
		 libros= new Libro[MAX_LIBROS];
		rellenaLibrosNull();
		
	}
/**
 * This constructor creates a library with a name and a given array, setting the array to its max capacity while filling it
 * with the null object created before.
 * 
 * 
 * @param nombre it's the name of the library
 * 
 * @see nombre
 * @see libros
 * @see libroNulo
 * @see MAX_LIBROS
 */
	public Biblioteca(String nombre, Libro[] librosParam) {
		
		this(nombre);
		
		agregarLibros(librosParam);
		
		
	}
/**
 * This method returns the name of the library
 * 
 * @return the name of the library
 * @see nombre
 */
	public String getNombre() {
		return nombre;
	}
/**
 * This method changes the name of the library to the one given by parameter
 * 
 * 
 * @param nombre new library name
 */
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	/**
	 * This method add a book (Libro class) to the library
	 * only if there is no room available in the Library
	 * 
	 * 
	 * 
	 * 
	 * @param libro a book to be added up to the library
	 */
	
	public void agregarLibro(Libro libro) {

		int cont = 0;
		boolean hayHueco = false;

		while (cont < this.libros.length && !hayHueco) {

			if (libros[cont].compareTo(libroNulo) == 0) {

				hayHueco = true;

			} else {
				cont++;
			}

		}

		if (hayHueco) {

			libros[cont] = libro;
			contLibros++;

		}

	}
	
	
/**
 * This method adds the books from a array to the library one
 * 
 * 
 * @param librosadd this is the given array full of books
 */
	
	public void agregarLibros(Libro[] librosadd) {

		for (int i = 0; i < librosadd.length && contLibros < MAX_LIBROS; i++) {

			agregarLibro(librosadd[i]);

		}

	}
/**
 * This method erases a specific book from the array by the given reference
 * and returns if the books was found out.
 * 
 * 
 * 
 * @param referencia this is the reference of the book to be erased
 * @return if the books was found or not
 */
	
	public boolean eliminarLibro(String referencia) {
	       // TODO Auto-generated method stub

	       boolean encontrado = false;
	       for (int i = 0; i < MAX_LIBROS && !encontrado; i++) {

	           if (libros[i].getReferencia().equals(referencia)) {
	               encontrado = true;
	               libros[i] = libroNulo;
	               contLibros--;
	           }

	       }

	       return encontrado;

	   }
/**
 * This method returns true if there is at least one book in the library
 * 
 * 
 * @return true or false depending of the existence of books in the library
 * @see libros
 */
	
	public boolean hayLibros() {

		return contLibros > 0;
	}
/**
 * This method returns an array with just the current books inside the library.
 * 
 * 
 * @return an array with just the books that aren't the null object
 * @see libros
 */
	
	public Libro[] getLibros() {
		
		Libro [] librosRes = new Libro[contLibros];
		
		int contlib = 0;

		for (int i = 0; i < libros.length && contlib < contLibros; i++) {

			if (libros[i].compareTo(libroNulo) != 0) {

				librosRes[contlib] = libros[i];
				contlib++;
			}

		}
		
		
		return librosRes;
	}


/**
 * This method searches a specific book inside the array by it's name.
 * 
 * @param titulo the name of the book to be searched
 * @return object book
 * @see Libro
 * @see libros
 */
	
	public Libro buscarLibroPorTitulo(String titulo) {

		Libro libroRes = libroNulo;
		boolean encontrado = false;

		for (int i = 0; i < MAX_LIBROS; i++) {

			if (libros[i].getTitulo().equals(titulo) && !encontrado) {

				libroRes = libros[i];
			}

		}
		return libroRes;

	}
/**
 * This method searches a specific book inside the array by it's reference number.
 * 
 * 
 * @param referencia the reference of the book to be searched
 * @return object book
 * @see Libro
 * @see libros
 */

	public Libro buscarLibroPorCcc(String referencia) {

		Libro libroRes = libroNulo;
		boolean encontrado = false;

		for (int i = 0; i < MAX_LIBROS; i++) {

			if (libros[i].getReferencia().equals(referencia)  && !encontrado) {

				libroRes = libros[i];
			}

		}
		return libroRes;

	}
/**
 * This method prints all the books inside the array
 * 
 * @see Biblioteca#getLibros()
 */
	public void listarLibros() {
		
      
		 for (Libro libro: this.getLibros()) {
			 
			 System.out.println(libro);
		 }
			 
			 
	}
/**
 * 
 * 
 * 
 */
	public void listarLibrosFiccion() {
		for (Libro libro: this.getLibros()) {
			if (!libro.esEducativo())
				System.out.println(libro);
		}
	}
/**
 * 
 * 
 * 	
 */
	
	public void listarLibrosEducativos() {
		for (Libro libro: this.getLibros()) {
			if (libro.esEducativo())
				System.out.println(libro);
		}
	}

/**
 * 
 * 
 * 
 */
	private void rellenaLibrosNull() {

		for (int i = 0; i < MAX_LIBROS; i++) {

			libros[i] = libroNulo;
		}
	}
/**
 * 
 * 
 * 	
 * @param libro
 * @return
 */
	public boolean esNulo(Libro libro) {
		return libro.compareTo(libroNulo)==0;
	}
/**
 * 
 * 
 * 
 */
	
	public void  ordenarLibros() {
	
		Arrays.sort(libros);
		listarLibros();
	}
/**
 * 
 * 
 * 
 * @param comparador
 */
	
	public void  ordenarLibrosPor(Comparator<Libro>comparador) {
		
		Arrays.sort(libros, comparador);
		listarLibros();
	}
}
